@mixin font-face($font-family, $url, $weight)
  @font-face
    font-family: "#{$font-family}"
    src: url('../fonts/#{$url}.woff2') format('woff2')
    //, url('../fonts/#{$url}.woff') format('woff')
    font-weight: #{$weight}
    font-display: swap
    font-style: normal

// Размер, жирность и интервал у шрифта
@mixin font($weight, $size, $height)
  font-weight: $weight
  font-size: $size + px
  // line-height: $height / $size
  line-height: math.div($height, $size)

// Адаптиный размер шрифта
@mixin font-size($pcSize, $mobSize)
  $addSize: $pcSize - $mobSize
  $maxWidth: $containerWidth - 320
  font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}))

@mixin fx-all
  display: flex
  align-items: center
  justify-content: space-between

@mixin fx-c
  display: flex
  align-items: center
  justify-content: center

// тень у изображения
@mixin image-shadow
  border-radius: 25px
  overflow: hidden
  filter: drop-shadow(2px 2px 25px rgba(0, 0, 0, 0.1))

// Скрытие объекта
@mixin hide
  display: none
  opacity: 0
  visibility: hidden

// media запросы
@mixin mediaDesk
  @media screen and (max-width: $pcw)
    @content

@mixin mediaNotebook
  @media screen and (max-width: $pc)
    @content

@mixin mediaTablet
  @media screen and (max-width: $tablet)
    @content

@mixin mediaPhone
  @media screen and (max-width: $mobile)
    @content

@mixin mediaPhoneMid
  @media screen and (max-width: $mobileMid)
    @content

@mixin mediaPhoneSm
  @media screen and (max-width: $mobileSmall)
    @content

//REM
@function rem($px)
  $result: math.div($px, 16) + rem
  @return $result

//EM
@function em($px, $current: 16)
  $result: math.div($px, $current) + em
  @return $result

// Адаптивное свойство - /**/ (свойство, макс размер, мин размер, старт разрешениея, xx, )
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth)
  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom)
  $widthToMedia: em($widthTo)
  // Ночальное и конечное значение в REM
  $minSizeValue: rem($minSize)
  $startSizeValue: rem($startSize)
  // Пересчитываем переменные относительно
  // размера шрифта по умолчанию
  $minWidth: math.div($minWidth, 16)
  $maxWidth: math.div($contentWidth, 16)
  $containerWidth: math.div($containerWidth, 16)
  $addSize: math.div($startSize - $minSize, 16)
  $widthTo: math.div($widthTo, 16)
  $widthFrom: math.div($widthFrom, 16)
  // Если указано ограничение у контейнера,
  // либо указана стартовая или конечная ширина
  // включаем режим работы в промежутке ширин
  @if ($containerWidth > 0 or $widthFrom != $containerWidth or $widthTo != $minWidth) and $widthFrom > $widthTo
    // Если стартовая ширина равна ширине контейнера + отступы,
    // или указана настройка "keepSize" ставим значение
    // по умолчанию равное стартовому размеру
    @if $widthFrom == $containerWidth or $keepSize == 1 or $keepSize == 2
      @media (min-width: $widthFromMedia)
        #{$property}: $startSizeValue
    // Адаптируем размер в промежутке между указанными ширинами вьюпорта
    @media (min-width: $widthToMedia) and (max-width: $widthFromMedia)
      #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$widthFrom - $widthTo}))))

    // Если конечная ширина равна минимальной ширине
    // или указана настройка "keepSize" ставим значение
    // по умолчанию равное конечному размеру
    @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3
      @media (max-width: $widthToMedia)
        #{$property}: $minSizeValue

  @else
    // Режим работы по всей ширине вьюпорта
    #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$maxWidth - $widthTo}))))
